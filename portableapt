#!/bin/bash
PAPTVERSION=0.6

if ! test -f $HOME/.local/share/portableapt/portableapt.conf; then mkdir -p $HOME/.local/share/portableapt; echo "AUTOUPDATE=ON" > $HOME/.local/share/portableapt/portableapt.conf; fi

settings () {
  if grep -Fxq "AUTOUPDATE=ON" $HOME/.local/share/portableapt/portableapt.conf; then AutoUpdate=ON; else AutoUpdate=OFF; fi
  SETTINGS=$(whiptail --title "Portable APT" --nocancel --menu "Réglages de Portable APT" 16 78 4 \
  "1" "Mise à jour automatique de Portable APT - $AutoUpdate" \
  "2" "Quitter" 3>&1 1>&2 2>&3)
  if [ "$SETTINGS" = "1" ]; then
    if [ "$AutoUpdate" = "OFF" ]; then
      sed -i 's/AUTOUPDATE=OFF/AUTOUPDATE=ON/g' $HOME/.local/share/portableapt/portableapt.conf
    else
      sed -i 's/AUTOUPDATE=ON/AUTOUPDATE=OFF/g' $HOME/.local/share/portableapt/portableapt.conf
    fi
    settings
  fi
}

paptupgrade () {
  echo "Mise à jour de portableapt..."
  wget -qO - https://github.com/DocSystem/portableapt/raw/main/upgrade | bash -
  echo "portableapt a été mis à jour !"
}

if grep -Fxq "AUTOUPDATE=ON" $HOME/.local/share/portableapt/portableapt.conf; then
  LastVer=`wget -qO - https://github.com/DocSystem/portableapt/raw/main/version | cat -`
  if [ "$LastVer" != "" ]; then
    if [ "$LastVer" != "$PAPTVERSION" ]; then
      paptupgrade
    fi
  fi
fi

arguments=""
options=""
for arg in "$@"; do
  if [[ $arg == -* ]]; then
    options="$options $arg"
  else
    arguments="$arguments $arg"
  fi
done
command=`echo $arguments | cut -d" " -f1`
arguments=`echo $arguments | cut -d" " --complement -f1`
if [ "$command" = "list" ]; then
	apt list
elif [ "$command" = "search" ]; then
	apt search $2
elif [ "$command" = "show" ]; then
	apt show $2
elif [ "$command" = "install" ]; then
	package=$arguments
	allpackages="$package"
	packagenum=0
	dlsize=0
	installsize=0
	alldependencies=`apt-cache depends --recurse --no-suggests --no-conflicts --no-breaks --no-replaces --no-enhances $package | grep "^\w" | sort -u | cut -d: -f1`
	alliterations=`echo $alldependencies | wc -w`
	rm -rf ./debs
	rm -rf ./dd
	mkdir debs
	mkdir dd
	cd debs
	iteration=0
	tput sc
	printf "Analyse des dépendances (0/$alliterations)"
	for dependence in $alldependencies; do
		isdependenceinstalled=`dpkg-query --list | grep -i "$dependence"`
		iteration=`expr $iteration + 1`
		tput rc;tput el
		printf "Analyse des dépendances ($iteration/$alliterations)"
		if [ "$isdependenceinstalled" = "" ]; then
			allpackages="$allpackages $dependence"
      packagenum=`expr $packagenum + 1`
		fi
	done
  echo ""
  echo "Calcul de l'espace disque nécessaire..."
	pkgdlsize=`apt-cache show --no-all-versions $allpackages | grep ^Size | cut -d':' -f2 | xargs`
	pkginstallsize=`apt-cache show --no-all-versions $allpackages | grep ^Installed-Size | cut -d':' -f2 | xargs`
  for num in $pkgdlsize; do
    dlsize=`expr $num + $dlsize`
  done
  for num in $pkginstallsize; do
    installsize=`expr $num + $installsize`
  done
	dlsize=`expr $dlsize / 1048576`
	installsize=`expr $installsize / 1024`
	echo ""
	echo "Les paquets suivants seront installés :"
	echo "$allpackages"
	echo "$packagenum paquets à installer."
	echo "Il est nécessaire de prendre $dlsize Mo dans les archives."
	echo "Après cette opération, $installsize Mo d'espace disque supplémentaire seront utilisés."
  if [[ $options == *-y* ]] || [[ $options == *--yes* ]]; then
    acceptInstall=o
  else
    read -p "Souhaitez-vous continuer ? [O/n] " acceptInstall
  fi
	if [ "$acceptInstall" = "" ] || [ "$acceptInstall" = "O" ] || [ "$acceptInstall" = "o" ]; then
		apt download $package $dependencies
		cd ..
		for f in `ls -C debs/`; do
			dpkg-deb -x debs/$f ./dd/
		done
		cp dd/usr/* -r ~/.local/
		rm -rf ./debs > /dev/null
		rm -rf ./dd > /dev/null
	else
		cd ..
		echo "Annulation."
		rm -rf ./debs > /dev/null
		rm -rf ./dd > /dev/null
	fi
elif [ "$command" = "install-deb" ]; then
	package=$arguments
	rm -rf ./debs
	rm -rf ./dd
	mkdir debs
	mkdir dd
	cd debs
	echo ""
	echo "Installation d'un paquet depuis $package :"
  if [[ $options == *-y* ]] || [[ $options == *--yes* ]]; then
    acceptInstall=o
  else
    read -p "Souhaitez-vous continuer ? [O/n] " acceptInstall
  fi
	if [ "$acceptInstall" = "" ] || [ "$acceptInstall" = "O" ] || [ "$acceptInstall" = "o" ]; then
    cp $package ./
		cd ..
		for f in `ls -C debs/`; do
			dpkg-deb -x debs/$f ./dd/
		done
		cp dd/usr/* -r ~/.local/
		rm -rf ./debs > /dev/null
		rm -rf ./dd > /dev/null
	else
		cd ..
		echo "Annulation."
		rm -rf ./debs > /dev/null
		rm -rf ./dd > /dev/null
	fi
elif [ "$command" = "remove" ]; then
	package=$arguments
  packagenum=`echo $package | wc -w`
	rm -rf ./debs
	rm -rf ./dd
	mkdir debs
	mkdir dd
	cd debs
	echo "Les paquets suivants seront désinstallés :"
	echo "$package"
	echo "$packagenum paquets à désinstaller."
  if [[ $options == *-y* ]] || [[ $options == *--yes* ]]; then
    acceptInstall=o
  else
    read -p "Souhaitez-vous continuer ? [O/n] " acceptInstall
  fi
	if [ "$acceptInstall" = "" ] || [ "$acceptInstall" = "O" ] || [ "$acceptInstall" = "o" ]; then
		apt download $package
		cd ..
		for f in `ls -C debs/`; do
			dpkg-deb -x debs/$f ./dd/
		done
		cd dd/usr
		for f in `find */* -print`; do
			rm -rf $HOME/.local/$f
		done
		cd ../..
		rm -rf ./debs > /dev/null
		rm -rf ./dd > /dev/null
	else
		cd ..
		echo "Annulation."
		rm -rf ./debs > /dev/null
		rm -rf ./dd > /dev/null
	fi
elif [ "$command" = "portable-upgrade" ]; then
  paptupgrade
elif [ "$command" = "settings" ]; then
  settings
else
	echo "portableapt $PAPTVERSION (all)"
	echo "Usage : portableapt [options] commande"
	echo ""
	echo "portableapt est un outil en ligne de commande pour gérer les paquets."
	echo "Il fournit des commandes pour chercher et gérer autant que pour"
	echo "rechercher des informations à propos des paquets. Il fournit les mêmes"
	echo "fonctions que les outils APT spécialisés, tels qu'apt-get et apt-cache,"
	echo "mais dispose d'options plus adaptées pour une utilisation interactive."
	echo "portableapt permet d'executer les commandes d'apt sans droits d'administrateur"
	echo ""
	echo "Commandes les plus utilisées :"
  echo "  list - liste les paquets selon leur nom (utilise apt)"
  echo "  search - cherche dans les descriptions de paquet (utilise apt)"
  echo "  show - affiche les détails du paquet (utilise apt)"
  echo "  install - installe / réinstalle / met à jour un paquet"
  echo "  install-deb - installe / réinstalle / met à jour un paquet depuis un deb"
  echo "  remove - supprime des paquets"
  echo "  portable-upgrade - met à jour le portableapt depuis GitHub"
  echo "  settings - ouvre les réglages de portableapt"
fi
